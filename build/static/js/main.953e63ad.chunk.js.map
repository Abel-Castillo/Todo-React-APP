{"version":3,"sources":["components/Main/ModalAddTodo.js","redux/actions/index.js","components/Header/SearchBar.js","components/Header/Nav.js","components/Header/Header.js","components/Main/Table.js","components/Main/Main.js","App.js","serviceWorker.js","DB/todos.js","redux/reducers/todos.js","redux/reducers/index.js","index.js"],"names":["ModalAddTodo","_useState","useState","startDate","Date","_useState2","Object","slicedToArray","date","setDate","dispatch","useDispatch","react_default","a","createElement","type","className","data-toggle","data-target","id","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","htmlFor","react_datepicker_es","selected","onChange","e","onClick","task","dueDate","newTask","document","querySelector","value","SearchBar","placeholder","console","log","target","searchValue","searchTaskHandler","NavStyled","styled","nav","_templateObject","Nav","Main_ModalAddTodo","Header_SearchBar","Head","Header_Nav","TableStyled","table","Table_templateObject","Table","props","todos","useSelector","state","toggleCompleteTaskHandler","toggleCompleteTask","scope","map","todo","key","completed","created","removeTodoTask","MainStyled","main","Main_templateObject","Main","Main_Table","GlobalStyle","createGlobalStyle","App_templateObject","App","this","Header","components_Main_Main","TodosDB","Component","Boolean","window","location","hostname","match","todosDB","db","JSON","parse","localStorage","getItem","arguments","length","undefined","action","newTodo","moment","format","Math","floor","random","concat","toConsumableArray","setItem","stringify","data","todoIndex","findIndex","updateTodo","filter","filteredTodos","toLowerCase","includes","allReducers","combineReducers","searchBar","store","createStore","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.953e63ad.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { newTodo } from \"../../redux/actions\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst ModalAddTodo = () => {\n  const [date, setDate] = useState({ startDate: new Date() });\n\n  const dispatch = useDispatch();\n  const addTaskHandler = () => {\n    const newTask = document.querySelector(\"#newTask\");\n    dispatch(newTodo(newTask.value, date.startDate));\n  };\n  const changeDate = event => {\n    setDate({\n      startDate: event\n    });\n  };\n  return (\n    <div>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        data-toggle=\"modal\"\n        data-target=\"#exampleModal\"\n      >\n        New Todo\n        <i className=\"fas fa-plus-circle\" />\n      </button>\n      <div\n        className=\"modal fade\"\n        id=\"exampleModal\"\n        tabIndex=\"-1\"\n        role=\"dialog\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n                New Todo\n              </h5>\n              <button\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n              >\n                <span aria-hidden=\"true\">\n                  <i className=\"fas fa-times-circle\" />\n                </span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <label htmlFor=\"newTask\">Task</label>\n              <input id=\"newTask\" type=\"text\" />\n              <label htmlFor=\"dueDate\">Task Due Date</label>\n              <DatePicker\n                id=\"dueDate\"\n                selected={date.startDate}\n                onChange={e => changeDate(e)}\n              />\n            </div>\n            <div className=\"modal-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-dismiss=\"modal\"\n              >\n                Close\n              </button>\n              <button\n                onClick={addTaskHandler}\n                type=\"button\"\n                className=\"btn btn-primary\"\n                data-dismiss=\"modal\"\n              >\n                Add\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalAddTodo;\n","export const newTodo = (task, dueDate) => {\n  return {\n    type: \"ADD_TODO\",\n    task,\n    dueDate\n  };\n};\n\nexport const toggleCompleteTask = id => {\n  return {\n    type: \"TOGGLE_COMPLETE_TASK\",\n    id\n  };\n};\n\nexport const removeTodoTask = id => {\n  return {\n    type: \"REMOVE_TODO\",\n    id\n  };\n};\n\nexport const searchTodoTask = searchValue => {\n  return {\n    type: \"SEARCH_WORD\",\n    searchValue\n  };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { searchTodoTask } from \"../../redux/actions\";\n\nconst SearchBar = () => {\n  const dispatch = useDispatch();\n\n  const searchTaskHandler = e => {\n    console.log(e.target.value);\n    dispatch(searchTodoTask(e.target.value));\n  };\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={e => searchTaskHandler(e)}\n      />\n      <i className=\"fas fa-search\" />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport ModalAddTodo from \"../Main/ModalAddTodo\";\nimport SearchBar from \"./SearchBar\";\n\nconst NavStyled = styled.nav`\n  display: flex;\n  justify-content: space-between;\n`;\nconst Nav = () => {\n  return (\n    <NavStyled>\n      <h1>\n        <i className=\"fas fa-clipboard-check\" />\n        Todo App\n      </h1>\n      <ModalAddTodo />\n      <SearchBar />\n    </NavStyled>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Nav from \"./Nav\";\n\nconst Head = () => {\n  return <Nav />;\n};\n\nexport default Head;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { toggleCompleteTask, removeTodoTask } from \"../../redux/actions\";\nconst TableStyled = styled.table`\n  text-align: center;\n\n  tr {\n    display: grid;\n    grid-template-columns: 30% 15% 20% 20% 15%;\n  }\n  td {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  .task {\n    overflow: auto;\n    word-wrap: break-word;\n  }\n  .done {\n    background: #c1ffc1 !important;\n  }\n  .table-striped {\n    background: #777;\n  }\n\n  .fa-check-circle {\n    transition: all 0.3s;\n    color: green;\n    &:hover {\n      cursor: pointer;\n      color: red;\n      transform: scale(1.1);\n      &:before {\n        content: \"\\f057\";\n      }\n    }\n  }\n`;\n\nconst Table = props => {\n  const todos = useSelector(state => state.todos);\n  const dispatch = useDispatch();\n\n  const toggleCompleteTaskHandler = id => {\n    dispatch(toggleCompleteTask(id));\n  };\n\n  const removeTodoTaskHandler = id => {\n    dispatch(removeTodoTask(id));\n  };\n  return (\n    <TableStyled className=\"table table-striped\">\n      <thead className=\"table-dark\">\n        <tr>\n          <th scope=\"col\">Task</th>\n          <th scope=\"col\">Completed</th>\n          <th scope=\"col\">Created</th>\n          <th scope=\"col\">Due Date</th>\n          <th scope=\"col\">Delete</th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map(todo => {\n          return (\n            <tr key={todo.id} className={todo.completed ? \"done\" : null}>\n              <td className=\"task\">\n                {todo.completed ? (\n                  <span className=\"complete\">{todo.task}</span>\n                ) : (\n                  <span className=\"task\">{todo.task}</span>\n                )}\n              </td>\n              <td>\n                {todo.completed ? (\n                  <i\n                    onClick={e => toggleCompleteTaskHandler(todo.id)}\n                    className=\"fas fa-check-circle\"\n                  />\n                ) : (\n                  <input\n                    type=\"checkbox\"\n                    onChange={e => toggleCompleteTaskHandler(todo.id)}\n                  />\n                )}\n              </td>\n\n              <td className={todo.completed ? \"complete\" : null}>\n                {todo.created ? todo.created : null}\n              </td>\n              <td className={todo.completed ? \"complete\" : null}>\n                {todo.dueDate ? todo.dueDate : null}\n              </td>\n              <td>\n                <i\n                  onClick={() => removeTodoTaskHandler(todo.id)}\n                  className=\"fas fa-trash\"\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </TableStyled>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Table from \"./Table\";\n\nconst MainStyled = styled.main`\n  h2 {\n    display: inline-block;\n  }\n  button {\n    border: none;\n    display: inline-block;\n\n    .fa-plus-circle {\n      color: #5499c7;\n      transition: all 0.5s;\n      &:hover {\n        color: #2980b9;\n        cursor: pointer;\n        transform: scale(1.1);\n      }\n    }\n    .fa-times-circle {\n      color: #c0392b;\n      transition: all 0.5s;\n      &:hover {\n        color: #a93226;\n        cursor: pointer;\n        transform: scale(1.1);\n      }\n    }\n    &:focus {\n      outline: none;\n    }\n  }\n  .add {\n    background: #5499c7;\n    transition: all 0.5s;\n    &:hover {\n      background: #2980b9;\n      cursor: pointer;\n      transform: scale(1.1);\n    }\n  }\n  .complete {\n    text-decoration: line-through;\n  }\n`;\n\nconst Main = props => {\n  return (\n    <MainStyled>\n      <Table />\n    </MainStyled>\n  );\n};\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport Header from \"./components/Header/Header\";\nimport Main from \"./components/Main/Main\";\n// import { directive } from \"@babel/types\";\n\n// STYLES\nconst GlobalStyle = createGlobalStyle`\nbody{\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n`;\n\nclass App extends Component {\n  render() {\n    console.log(this.state);\n    return (\n      <div>\n        <GlobalStyle />\n        <Header />\n        <Main TodosDB={this.state} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const todosDB = () => {\n  const db = JSON.parse(localStorage.getItem(\"todosDB\"));\n  if (db) {\n    return db;\n  } else {\n    return [];\n  }\n};\n\nexport default todosDB();\n","import todosDB from \"../../DB/todos\";\nimport moment from \"moment\";\n\nconst todos = (state = todosDB, action) => {\n  switch (action.type) {\n    case \"ADD_TODO\":\n      const newTodo = [\n        {\n          completed: false,\n          task: action.task,\n          created: moment().format(\"MMMM Do YYYY\"),\n          dueDate: moment(action.dueDate).format(\"MMMM Do YYYY\"),\n          id: Math.floor(Math.random() * 10000000000000)\n        },\n        ...state\n      ];\n\n      localStorage.setItem(\"todosDB\", JSON.stringify(newTodo));\n      const data = JSON.parse(localStorage.getItem(\"todosDB\"));\n      console.log(data);\n      return (state = [...data]);\n    case \"TOGGLE_COMPLETE_TASK\":\n      const todoIndex = state.findIndex(todo => todo.id === action.id);\n      state[todoIndex].completed = !state[todoIndex].completed;\n\n      localStorage.setItem(\"todosDB\", JSON.stringify(state));\n      console.log(todoIndex, state);\n      return (state = [...state]);\n    case \"REMOVE_TODO\":\n      const updateTodo = state.filter(todo => todo.id !== action.id);\n      localStorage.setItem(\"todosDB\", JSON.stringify(updateTodo));\n      return (state = updateTodo);\n    case \"SEARCH_WORD\":\n      const dataTodo = JSON.parse(localStorage.getItem(\"todosDB\"));\n\n      const filteredTodos = dataTodo.filter(todo =>\n        todo.task.toLowerCase().includes(action.searchValue.toLowerCase())\n      );\n\n      return (state = [...filteredTodos]);\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n","import todos from \"./todos\";\nimport searchBar from \"./search\";\nimport { combineReducers } from \"redux\";\n\nconst allReducers = combineReducers({\n  todos,\n  searchBar\n});\n\nexport default allReducers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport allReducers from \"./redux/reducers\";\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}